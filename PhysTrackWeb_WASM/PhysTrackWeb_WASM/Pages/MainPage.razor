@page "/"
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@inject IJSRuntime JSRuntime
<PageTitle>Camera Main</PageTitle>

<MudGrid>
	<MudItem md="6">
		<MudGrid>
			<MudItem md="12">
			<video id="videoElement" width="100%" autoplay></video>
			</MudItem>
			<MudItem md="12">
				<MudButton OnClick="@captureImage">Capture</MudButton>
			</MudItem>
		</MudGrid>
	</MudItem>
	<MudItem  md="6">
		<div style="width: 100%; height: 100%;">
		<SkiaSharp.Views.Blazor.SKGLView @ref="skView"
		style="width: 100%; height: 50vh;"
		IgnorePixelScaling="true"
		OnPaintSurface="async (e) => await PaintSurface(e)"
		></SkiaSharp.Views.Blazor.SKGLView>
		</div>
	</MudItem>
</MudGrid>
@code{
	SKGLView skView;
	IJSObjectReference camModule;
	string vidFrameID = "videoElement";
	protected override async Task OnAfterRenderAsync(bool firstRender){
		if (!firstRender)
			return;
		camModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/camera.js");
		await camModule.InvokeVoidAsync("registerFrameSink", DotNetObjectReference.Create(this));
		await camModule.InvokeVoidAsync("startCamera", vidFrameID);
	}
	[JSInvokable]
	public void OnNewFrame(string base64)
	{
		
	}
	SKImage capturedFrame;
	private async Task PaintSurface(SKPaintGLSurfaceEventArgs e){
		var wid = e.Info.Width;
		var hei = e.Info.Height;
		var canvas = e.Surface.Canvas;
		if (capturedFrame != null)
			canvas.DrawImage(capturedFrame, 0, 0);
	}
	async Task captureImage(){

		var base64 = (await camModule.InvokeAsync<string>("captureOneFrame")).Split(',')[1];
		var bytes = Convert.FromBase64String(base64);
		capturedFrame = SKImage.FromEncodedData(bytes);
		skView.Invalidate();
	}
}